# This is the configuration file for Gammapy on Azure Pipelines

variables:
  GAMMAPY_DATA: $(Agent.HomeDirectory)/gammapy-data

jobs:

- job: 'Test'

  strategy:
    matrix:
      Python36:
        imageName: 'ubuntu-16.04'
        python.version: '3.6'
      Windows36:
        imageName: 'vs2017-win2016'
        python.version: '3.6'
      Windows37:
        imageName: 'vs2017-win2016'
        python.version: '3.7'

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install pytest pytest-cov cython numpy astropy regions pyyaml click pytest-astropy parfive pydantic pytest-astropy-header
      pip install matplotlib reproject iminuit
    displayName: 'Install dependencies'

  - script: |
      pip install -e .
      python -m gammapy info
    displayName: 'Install Gammapy'

  - task: Cache@2
    inputs:
      key: gammapy_data | $(Build.SourceVersion)
      restoreKeys: |
         gammapy_data | $(Build.SourceVersion)
      path: $(GAMMAPY_DATA)
    displayName: Cache GAMMAPY_DATA

  - script: |
      gammapy download datasets --out=$(GAMMAPY_DATA) --silent --tests
    displayName: 'Get GAMMAPY_DATA'

  - script: |
      pytest gammapy --junitxml=junit/test-results.xml
    displayName: 'Run pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'TestNotebooks'

  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install cython numpy astropy regions pyyaml click parfive pydantic jupyter
      pip install matplotlib reproject iminuit emcee corner
    displayName: 'Install dependencies'

  - script: |
      pip install -e .
      python -m gammapy info
    displayName: 'Install Gammapy'

  - task: Cache@2
    inputs:
      key: gammapy_data | $(Build.SourceVersion)
      restoreKeys: |
         gammapy_data | $(Build.SourceVersion)
      path: $(GAMMAPY_DATA)
    displayName: Cache GAMMAPY_DATA

  - script: |
      gammapy download datasets --out=$(GAMMAPY_DATA) --silent --tests
    displayName: 'Get GAMMAPY_DATA'

  - script: |
      make test-nb
    displayName: 'Run jupyter notebook tests'


- job: 'Lint'

  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add conda to PATH

  - script: |
      conda env create --file environment-dev.yml
      source activate gammapy-dev
      pip install -e .
      gammapy info
    displayName: 'Create gammapy-dev conda environment'

  - script: |
      source activate gammapy-dev
      make flake8
      exit 0  # allow fail
    displayName: 'Run flake8'

  - script: |
      source activate gammapy-dev
      make pylint
      exit 0  # allow fail
    displayName: 'Run pylint'

  - script: |
      source activate gammapy-dev
      make pydocstyle
      exit 0  # allow fail
    displayName: 'Run pydocstyle'


- job: 'DevDocs'
  pool:
    vmImage: 'Ubuntu 16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add conda to PATH

  - script: |
      conda env create --file environment-dev.yml
      source activate gammapy-dev
      pip install -e .
      gammapy info
    displayName: 'Create gammapy-dev conda environment'

  - task: Cache@2
    inputs:
      key: gammapy_data | $(Build.SourceVersion)
      restoreKeys: |
         gammapy_data | $(Build.SourceVersion)
      path: $(GAMMAPY_DATA)
    displayName: Cache GAMMAPY_DATA

  - script: |
      source activate gammapy-dev
      gammapy download datasets --out=$(GAMMAPY_DATA) --silent --tests
    displayName: 'Get GAMMAPY_DATA'

  - script: |
      source activate gammapy-dev
      python -m gammapy.utils.tutorials_process
    displayName: 'Run tutorial Jupyter notebooks'

  - script: |
      source activate gammapy-dev
      make docs-sphinx
    displayName: 'Run Sphinx documentation build'

  - script: |
      echo TODO
    displayName: 'Push HTML to Github pages'
