[project]
name = "gammapy"
description = "A Python package for gamma-ray astronomy"
readme = "LONG_DESCRIPTION.rst"
license = { text = "BSD-3-Clause" }
authors = [
    { name = "The Gammapy developers", email = "gammapy-coordination-l@in2p3.fr" }
]
requires-python = ">=3.10"
classifiers = [
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: C",
    "Programming Language :: Cython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Astronomy",
]
dependencies = [
    "numpy>=1.26",
    "scipy>=1.13",
    "astropy>=6.0",
    "regions>=0.9.0",
    "pyyaml>=5.3",
    "click>=8.0",
    "pydantic>=2.8.0",
    "iminuit>=2.26.0",
    "matplotlib>=3.8,<3.10",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://gammapy.org"
Documentation = "https://docs.gammapy.org/dev/"
Source = "https://github.com/gammapy/gammapy"

[build-system]
requires = [
    "setuptools >= 65",
    "wheel",
    "Cython",
    "numpy >= 2.0.0rc1",
    "setuptools_scm[toml] >= 8",
]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
all = [
    "naima",
    "sherpa; platform_system != 'Windows'",
    "healpy; platform_system != 'Windows'",
    "requests",
    "tqdm",
    "ipywidgets",
    "ray[default]>=2.9",
    "ultranest",
    "numba",
]
all_no_ray = [
    "naima",
    "sherpa; platform_system != 'Windows'",
    "healpy; platform_system != 'Windows'",
    "requests",
    "tqdm",
    "ipywidgets",
    "ultranest",
    "numba",
]
cov = [
    "naima",
    "sherpa; platform_system != 'Windows'",
    "healpy; platform_system != 'Windows'",
    "requests",
    "tqdm",
    "ipywidgets",
    "ultranest",
    "numba",
]
test = [
    "pytest-astropy",
    "pytest-xdist",
    "pytest",
    "docutils",
    "sphinx",
]
docs = [
    "astropy",
    "numpydoc",
    "sphinx",
    "sphinx_automodapi",
    "sphinx-click",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-gallery",
    "pydata-sphinx-theme",
    "nbformat",
    "docutils",
]

[tool.setuptools.packages.find]
include = ["gammapy*"]

[tool.setuptools.package-data]
"gammapy" = ["../CITATION", "../CITATION.cff"]
"gammapy.analysis" = ["config/*"]
"gammapy.workflow" = ["config/*"]
"gammapy.irf.psf.tests" = ["data/*"]
"gammapy.modeling.models.tests" = ["data/*"]
"gammapy.catalog.tests" = ["data/*"]


[tool.pytest.ini_options]
filterwarnings = [
    "error::astropy.utils.exceptions.AstropyDeprecationWarning",
    "error::gammapy.utils.deprecation.GammapyDeprecationWarning",
    "error::matplotlib.MatplotlibDeprecationWarning",
]

[tool.setuptools]
zip-safe = false

[tool.setuptools_scm]
version_file = "gammapy/version.py"
version_file_template = """
# Note that we need to fall back to the hard-coded version if either
# setuptools_scm can't be imported or setuptools_scm can't determine the
# version, so we catch the generic 'Exception'.
try:
    from setuptools_scm import get_version
    version = get_version(root='..', relative_to=__file__)
except Exception:
    version = '{version}'
"""

[tool.ruff]
exclude = ["docs", "dev"]
# Like black
line-length = 88
indent-width = 4

[tool.ruff.lint]
ignore = ["E741"]
extend-ignore = ["E203","E712"]

[tool.ruff.lint.per-file-ignores]
"examples/*" = ["E402"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[project.scripts]
gammapy = "gammapy.scripts.main:cli"