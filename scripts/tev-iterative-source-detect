#!/usr/bin/env python
# Licensed under a 3-clause BSD style license - see LICENSE.rst
"""An iterative multi-scale source detection method.
"""
from gammapy.detect.iterfind import run_detection

def parse_args():
    # Parse command line arguments
    from astropy.utils.compat import argparse
    parser = argparse.ArgumentParser(description='A prototype iterative source detection tool')
    parser.add_argument('scales', type=float, nargs='*', default=[0.1, 0.2, 0.4],
                        help='List of spatial scales (deg) to search for sources'
                        '[default=%(default)s]')
    parser.add_argument('--counts', type=str, default='counts.fits',
                        help='Counts FITS file name '
                        '[default=%(default)s]')
    parser.add_argument('--background', type=str, default='background.fits',
                        help='Background FITS file name '
                        '[default=%(default)s]')
    parser.add_argument('--exposure', type=str, default='exposure.fits',
                        help='Exposure FITS file name '
                        '[default=%(default)s]')
    parser.add_argument('--output_fits', type=str, default='detections.fits',
                        help='Output catalog of detections (FITS table format) '
                        '[default=%(default)s]')
    parser.add_argument('--output_regions', type=str, default='detections.reg',
                        help='Output catalog of detections (ds9 region file format) '
                        '[default=%(default)s]')
    parser.add_argument('--debug_output_folder', type=str, default='',
                        help='Debug output folder name (empty string for no output) '
                        '[default=%(default)s]')
    args = parser.parse_args()
    args = vars(args)



if __name__ == '__main__':

    args = parse_args()
    run_detection(args)
