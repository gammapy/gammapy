language: python

python:
    - 2.6
    - 2.7
    - 3.2
    - 3.3
    # This is just for "egg_info".  All other builds are explicitly given in the matrix
env:
    global:
        - WHEELHOUSE_HUB=http://physics.mnstate.edu/craig/wheelhouse
        - PIP_WHEEL_STRICT_NUMPY="pip install --use-wheel --no-index"
        - USE_HUBS=false
        - PIP_WHEEL_COMMAND="pip install --find-links http://wheels.astropy.org/ --find-links http://wheels2.astropy.org/ --use-wheel --use-mirrors"
    matrix:
        - SETUP_CMD='egg_info' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=false

matrix:
    include:

        # Do a coverage test in Python 2
        - python: 2.7
          env: NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable SETUP_CMD='test --coverage' OPTIONAL_DEPS=true

        # Check for sphinx doc build warnings - we do this first because it
        # runs for a long time
        - python: 2.7
          env: SETUP_CMD='build_sphinx -w -n' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=true
          # OPTIONAL_DEPS needed because the plot_directive in sphinx needs them

        # Try all python versions with the latest numpy
        - python: 2.6
          env: SETUP_CMD='test --parallel=8' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=false
        - python: 2.7
          env: SETUP_CMD='test --parallel=8' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=false
        # There is a bug in pytest-xdist that prevents it from working
        # on Python 3.x.  See:
        # https://bitbucket.org/hpk42/pytest/issue/301/internal-error-during-test-collecting
        - python: 3.2
          env: SETUP_CMD='test' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=false
        - python: 3.3
          env: SETUP_CMD='test' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=false

        # Now try do scipy on 2.7 and an appropriate 3.x build (with latest numpy)
        - python: 2.7
          env: SETUP_CMD='test --parallel=8' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=true LC_CTYPE=C.ascii
        - python: 3.2
          env: SETUP_CMD='test' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=stable OPTIONAL_DEPS=true LC_CTYPE=C.ascii

        # Try alternate numpy versions
        # These don't work with Astropy wheels:
        # https://travis-ci.org/gammapy/gammapy/jobs/22939829#L719
        - python: 3.2
          env: USE_HUBS=true NUMPY_VERSION=1.6.2 ASTROPY_VERSION=stable SETUP_CMD='test' OPTIONAL_DEPS=false
        - python: 2.7
          env: USE_HUBS=true NUMPY_VERSION=1.5.1 ASTROPY_VERSION=stable SETUP_CMD='test --parallel=8' OPTIONAL_DEPS=false

        # Now try Astropy development version
        - python: 2.7
          env: SETUP_CMD='test --parallel=8' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=development OPTIONAL_DEPS=true LC_CTYPE=C.ascii
        - python: 3.2
          env: SETUP_CMD='test' NUMPY_VERSION=1.8.0 ASTROPY_VERSION=development OPTIONAL_DEPS=true LC_CTYPE=C.ascii

before_install:

    # Use utf8 encoding. Should be default, but this is insurance against
    # future changes
    - export PYTHONIOENCODING=UTF8

    # Install the pip that supports wheel
    - pip install setuptools --upgrade
    - pip install pip --upgrade
    - pip install wheel

    # We do this to make sure we get dependencies so pip works below
    # Note that travis does *not* use python packages installed via apt - it
    # does all the building in an isolated virtualenv
    - sudo apt-get update

    # CORE DEPENDENCIES
    - sudo apt-get install python-numpy cython libatlas-dev liblapack-dev gfortran

    # OPTIONAL DEPENDENCIES
    - if $OPTIONAL_DEPS; then sudo apt-get install python-scipy libhdf5-serial-1.8.4 libhdf5-serial-dev; fi

    # DOCUMENTATION DEPENDENCIES
    - if [[ $SETUP_CMD == build_sphinx* ]]; then sudo apt-get install python-sphinx graphviz texlive-latex-extra dvipng python-matplotlib; fi


install:
    - export WHEELHOUSE_SPOKE=$WHEELHOUSE_HUB/numpy-$NUMPY_VERSION
    # CORE DEPENDENCIES
    # These command run pip first trying a wheel, and then falling back on
    # source build
    - if [[ $SETUP_CMD != egg_info && $USE_HUBS == true ]]; then $PIP_WHEEL_STRICT_NUMPY --find-links=$WHEELHOUSE_SPOKE --upgrade --force-reinstall numpy==$NUMPY_VERSION; fi
    - if [[ $SETUP_CMD != egg_info && $USE_HUBS == false ]]; then $PIP_WHEEL_COMMAND --upgrade "numpy==$NUMPY_VERSION"; fi
    - if [[ $SETUP_CMD != egg_info ]]; then $PIP_WHEEL_COMMAND "Cython==0.19.1"; fi
    - if [[ $SETUP_CMD != egg_info ]]; then $PIP_WHEEL_COMMAND "pytest==2.5.1"; fi
    - if [[ $SETUP_CMD != egg_info ]]; then $PIP_WHEEL_COMMAND "pytest-xdist==1.10"; fi
    - if [[ $ASTROPY_VERSION == stable ]]; then $PIP_WHEEL_COMMAND "astropy"; fi
    - if [[ $ASTROPY_VERSION == development ]]; then pip -q install git+http://github.com/astropy/astropy.git#egg=astropy --use-mirrors; fi

    # OPTIONAL DEPENDENCIES
    - if $OPTIONAL_DEPS; then $PIP_WHEEL_COMMAND "scipy==0.13.1"; fi
    - if $OPTIONAL_DEPS; then $PIP_WHEEL_COMMAND "h5py==2.1.3"; fi

    # DOCUMENTATION DEPENDENCIES
    # build_sphinx needs sphinx and matplotlib (for plot_directive). Note that
    # this matplotlib will *not* work with py 3.x, but our sphinx build is
    # currently 2.7, so that's fine
    - if [[ $SETUP_CMD == build_sphinx* ]]; then $PIP_WHEEL_COMMAND "Sphinx==1.2.1"; fi
    - if [[ $SETUP_CMD == build_sphinx* ]]; then $PIP_WHEEL_COMMAND "matplotlib==1.3.0"; fi

    # COVERAGE DEPENDENCIES
    - if [[ $SETUP_CMD == 'test --coverage' ]]; then $PIP_WHEEL_COMMAND "pytest-cov" ; fi
    - if [[ $SETUP_CMD == 'test --coverage' ]]; then $PIP_WHEEL_COMMAND "coveralls"; fi

script:
    - python setup.py $SETUP_CMD

after_success:
  - if [[ $SETUP_CMD == 'test --coverage' ]]; then coveralls; fi
