#
# This travis-ci build matrix config is a modified copy of the one from Astropy
#


# We can't use `language: python` here because it's not supported on Mac.
# But that's OK ... the language here is irrelevant because we use conda
# to install our own Python.
language: c

os:
    - linux

# This is a signal to travis-ci to use the new build infrastructure
sudo: false

addons:
  apt:
    packages: &default_apt
      - graphviz
      - texlive-latex-extra
      - dvipng
      - gfortran

env:
    global:
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable

        - CONDA_DEPENDENCIES='Cython click scipy healpy matplotlib pyyaml uncertainties pandas naima sherpa libgfortran regions reproject pandoc ipython iminuit'
        - CONDA_DEPENDENCIES_OSX='Cython click scipy healpy matplotlib pyyaml uncertainties pandas naima sherpa regions reproject pandoc ipython iminuit'
        - CONDA_DEPENDENCIES_WO_SHERPA='Cython click scipy healpy matplotlib pyyaml uncertainties pandas naima regions reproject pandoc ipython iminuit'
        - CONDA_DOCS_DEPENDENCIES='Cython click scipy healpy matplotlib pyyaml uncertainties pandas naima pygments sherpa libgfortran regions reproject pandoc ipython jupyter'
        - CONDA_DEPENDENCIES_NOTEBOOKS='Cython click scipy healpy matplotlib pyyaml uncertainties pandas naima sherpa libgfortran iminuit regions reproject pandoc ipython jupyter'

        - PIP_DEPENDENCIES='nbsphinx sphinx-click sphinx_rtd_theme pytest-astropy'

        - CONDA_CHANNELS='conda-forge sherpa'

        - FETCH_GAMMAPY_EXTRA=false
        - FETCH_GAMMAPY_DATA=true
        - PACKAGING_TEST=false
        - TEST_FERMIPY=false

        - MAIN_CMD='python setup.py'

        - ASTROPY_USE_SYSTEM_PYTEST=1

    matrix:
        - PYTHON_VERSION=3.5 SETUP_CMD='egg_info' FETCH_GAMMAPY_DATA=false

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # MacOS X tests
        - os: osx
          env: PYTHON_VERSION=3.5 SETUP_CMD='test'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_OSX

        # The main build that's used for coverage measurement
        - os: linux
          env: PYTHON_VERSION=3.7 SETUP_CMD='test -V --coverage'

        # Run tests without optional dependencies
        - os: linux
          env: PYTHON_VERSION=3.5 SETUP_CMD='test -V'
               CONDA_DEPENDENCIES='Cython click regions'
               PIP_DEPENDENCIES='pytest-astropy'

        # Run tests without GAMMAPY_EXTRA available
        - os: linux
          env: FETCH_GAMMAPY_EXTRA=false PYTHON_VERSION=3.7 SETUP_CMD='test -V'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES

        # Build docs
        - os: linux
          env: PYTHON_VERSION=3.7 MAIN_CMD='make' SETUP_CMD='docs-all'
               CONDA_DEPENDENCIES=$CONDA_DOCS_DEPENDENCIES

        # Test conda build (which runs a bunch of useful tests after building the package)
        # See https://conda.io/docs/bdist_conda.html
        - os: linux
          env: PYTHON_VERSION=3.7 MAIN_CMD='make' SETUP_CMD='conda'
               PACKAGING_TEST=true

        # Older Python versions
        - os: linux
          env: PYTHON_VERSION=3.5 SETUP_CMD='test -V'

        # Test with Astropy dev and LTS versions
        - os: linux
          env: PYTHON_VERSION=3.5 ASTROPY_VERSION=lts SETUP_CMD='test -V'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES

        - os: linux
          env: PYTHON_VERSION=3.5 ASTROPY_VERSION=dev SETUP_CMD='test -V'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES

        # Test with Sherpa dev, this may take a longer time
        - os: linux
          env: PYTHON_VERSION=3.6 SETUP_CMD='test -V'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_WO_SHERPA DEBUG=True
               PIP_DEPENDENCIES='uncertainties git+http://github.com/sherpa/sherpa.git#egg=sherpa pytest-astropy'

        # Test Fermipy master against gammapy master
        - os: linux
          env: PYTHON_VERSION=3.6 SETUP_CMD='install'
               TEST_FERMIPY=true

        # Test with other numpy versions
        - os: linux
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.10 ASTROPY_VERSION=lts
               SETUP_CMD='test -V'

        # Test Jupyter notebooks
        - os: linux
          env: PYTHON_VERSION=3.5 MAIN_CMD='make' SETUP_CMD='test-notebooks'
               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_NOTEBOOKS

    # You can move builds that temporarily fail because of some non-Gammapy here.
    # Please add a link to a GH issue that tracks the upstream issue.
    # copy the part from the `include` section above here.
#    allow_failures:
#        - os: linux
#          env: PYTHON_VERSION=3.5 MAIN_CMD='make' SETUP_CMD='test-notebooks'
#               CONDA_DEPENDENCIES=$CONDA_DEPENDENCIES_NOTEBOOKS


install:
    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # From https://conda.io/docs/bdist_conda.html
    # bdist_conda must be installed into a root conda environment,
    # as it imports conda and conda_build. It is included as part of the conda build package.
    - if $PACKAGING_TEST; then
          conda install -n root conda-build astropy Cython click regions;
          conda info;
          conda --version;
          conda build --version;
          source activate root;
      fi

    # This is needed to make matplotlib plot testing work
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
          export DISPLAY=:99.0;
          sh -e /etc/init.d/xvfb start;
          export QT_API=pyqt;
      fi

script:
    - if $FETCH_GAMMAPY_EXTRA; then
          git clone https://github.com/gammapy/gammapy-extra.git ${HOME}/gammapy-extra;
          export GAMMAPY_EXTRA=${HOME}/gammapy-extra;
      fi

    - if $FETCH_GAMMAPY_DATA; then
          export GAMMAPY_DATA=${HOME}/gammapy-data;
          pip install .;
          gammapy download datasets --out=$GAMMAPY_DATA;
      fi

    - $MAIN_CMD $SETUP_CMD

    - if $TEST_FERMIPY; then
          git clone https://github.com/fermiPy/fermipy.git;
          cd fermipy;
          pytest -v;
      fi

after_success:
    - if [[ $SETUP_CMD == 'test -V --coverage' ]]; then
          coveralls --rcfile='gammapy/tests/coveragerc';
      fi
